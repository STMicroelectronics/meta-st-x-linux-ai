From abce2f8a46e91b413839b9b34c81b84906a01401 Mon Sep 17 00:00:00 2001
From: Vincent ABRIOU <vincent.abriou@st.com>
Date: Wed, 15 Mar 2023 19:01:53 +0100
Subject: [PATCH 1/1] cmake: support git clone shallow with specified SHA1 ID

Git clone shallow with a SHA1 ID is not working when the SHA1 ID is not
referring to the last branch commit.
This patch allow to only clone a specific SHA1 ID using the GIT_SHALLOW
option (--depth).
The trick is to not use git clone but to use git fetch instead
1/ create directory
2/ git init
3/ git remote add <git_remote_name> <git_repository>
4/ git fetch --depth 1 <git_remote_name> <git_tag>
5/ git checkout FETCH_HEAD

Signed-off-by: Vincent ABRIOU <vincent.abriou@st.com>
---
 Modules/ExternalProject.cmake | 212 +++++++++++++++++++++++++++++-----
 1 file changed, 185 insertions(+), 27 deletions(-)

diff --git a/Modules/ExternalProject.cmake b/Modules/ExternalProject.cmake
index 995265803b..ce45cb6af3 100644
--- a/Modules/ExternalProject.cmake
+++ b/Modules/ExternalProject.cmake
@@ -1269,7 +1269,6 @@ function(_ep_write_gitclone_script
   init_submodules
   git_submodules_recurse
   git_submodules
-  git_shallow
   git_progress
   git_config
   src_name
@@ -1298,13 +1297,6 @@ function(_ep_write_gitclone_script
   else()
     set(git_clone_options)
   endif()
-  if(git_shallow)
-    if(NOT GIT_VERSION_STRING VERSION_LESS 1.7.10)
-      list(APPEND git_clone_options "--depth 1 --no-single-branch")
-    else()
-      list(APPEND git_clone_options "--depth 1")
-    endif()
-  endif()
   if(git_progress)
     list(APPEND git_clone_options --progress)
   endif()
@@ -1333,6 +1325,149 @@ function(_ep_write_gitclone_script
   )
 endfunction()
 
+function(_ep_write_gitclone_with_gitfetch_script
+  script_filename
+  source_dir
+  git_EXECUTABLE
+  git_repository
+  git_tag
+  git_remote_name
+  init_submodules
+  git_submodules_recurse
+  git_submodules
+  git_shallow
+  git_progress
+  git_config
+  src_name
+  work_dir
+  gitclone_infofile
+  gitclone_stampfile
+  tls_verify
+)
+
+  # 1/ create directory
+  # 2/ git init
+  # 3/ git remote add <git_remote_name> <git_repository>
+  # 4/ git fetch --depth 1 <git_remote_name> <git_tag>
+  # 5/ git checkout FETCH_HEAD
+  if(git_progress)
+    set(git_fetch_options "--progress")
+  endif()
+  list(APPEND git_fetch_options "--depth 1 ${git_remote_name}")
+
+  string (REPLACE ";" " " git_fetch_options "${git_fetch_options}")
+
+  set(git_options)
+  # disable cert checking if explicitly told not to do it
+  if(NOT "x${tls_verify}" STREQUAL "x" AND NOT tls_verify)
+    set(git_options
+      -c http.sslVerify=false)
+  endif()
+  string (REPLACE ";" " " git_options "${git_options}")
+
+  file(WRITE ${script_filename}
+"
+if(NOT \"${gitclone_infofile}\" IS_NEWER_THAN \"${gitclone_stampfile}\")
+  message(STATUS \"Avoiding repeated git clone, stamp file is up to date: '${gitclone_stampfile}'\")
+  return()
+endif()
+
+execute_process(
+  COMMAND \${CMAKE_COMMAND} -E remove_directory \"${source_dir}\"
+  RESULT_VARIABLE error_code
+  )
+if(error_code)
+  message(FATAL_ERROR \"Failed to remove directory: '${source_dir}'\")
+endif()
+
+# create directory to clone the git
+execute_process(
+  COMMAND \${CMAKE_COMMAND} -E make_directory \"${src_name}\"
+  WORKING_DIRECTORY \"${work_dir}\"
+  RESULT_VARIABLE error_code
+  )
+if(error_code)
+  message(FATAL_ERROR \"Failed to create directory: '${src_name}'\")
+endif()
+
+# initialise git
+execute_process(
+  COMMAND \"${git_EXECUTABLE}\" init
+  WORKING_DIRECTORY \"${work_dir}/${src_name}\"
+  RESULT_VARIABLE error_code
+  )
+if(error_code)
+  message(FATAL_ERROR \"Failed to initialize git tree: '${source_dir}'\")
+endif()
+
+# Add remote repository
+execute_process(
+  COMMAND \"${git_EXECUTABLE}\" remote add ${git_remote_name} \"${git_repository}\"
+  WORKING_DIRECTORY \"${work_dir}/${src_name}\"
+  RESULT_VARIABLE error_code
+  )
+if(error_code)
+  message(FATAL_ERROR \"Failed to add remote remository:
+          \${git_remote_name} ${git_repository}\")
+endif()
+
+# Git fetch
+# try the fetch 3 times in case there is an odd git fetch issue
+set(error_code 1)
+set(number_of_tries 0)
+while(error_code AND number_of_tries LESS 3)
+  execute_process(
+    COMMAND \"${git_EXECUTABLE}\" ${git_options} fetch ${git_fetch_options} ${git_tag}
+    WORKING_DIRECTORY \"${work_dir}/${src_name}\"
+    RESULT_VARIABLE error_code
+    )
+  math(EXPR number_of_tries \"\${number_of_tries} + 1\")
+endwhile()
+if(number_of_tries GREATER 1)
+  message(STATUS \"Had to git fetch more than once:
+          \${number_of_tries} times.\")
+endif()
+if(error_code)
+  message(FATAL_ERROR \"Failed to fetch repository: '${git_repository}'\")
+endif()
+
+execute_process(
+  COMMAND \"${git_EXECUTABLE}\" ${git_options} checkout FETCH_HEAD
+  WORKING_DIRECTORY \"${work_dir}/${src_name}\"
+  RESULT_VARIABLE error_code
+  )
+if(error_code)
+  message(FATAL_ERROR \"Failed to checkout tag: '${git_tag}'\")
+endif()
+
+set(init_submodules ${init_submodules})
+if(init_submodules)
+  execute_process(
+    COMMAND \"${git_EXECUTABLE}\" ${git_options} submodule update ${git_submodules_recurse} --init ${git_submodules}
+    WORKING_DIRECTORY \"${work_dir}/${src_name}\"
+    RESULT_VARIABLE error_code
+    )
+endif()
+if(error_code)
+  message(FATAL_ERROR \"Failed to update submodules in: '${work_dir}/${src_name}'\")
+endif()
+
+# Complete success, update the script-last-run stamp file:
+#
+execute_process(
+  COMMAND \${CMAKE_COMMAND} -E copy
+    \"${gitclone_infofile}\"
+    \"${gitclone_stampfile}\"
+  RESULT_VARIABLE error_code
+  )
+if(error_code)
+  message(FATAL_ERROR \"Failed to copy script-last-run stamp file: '${gitclone_stampfile}'\")
+endif()
+"
+)
+
+endfunction()
+
 function(_ep_write_hgclone_script
   script_filename
   source_dir
@@ -2850,25 +2985,48 @@ CMP0097=${_EP_CMP0097}
     # create a cmake script to invoke as download command.
     # The script will delete the source directory and then call git clone.
     #
-    _ep_write_gitclone_script(
-      ${tmp_dir}/${name}-gitclone.cmake
-      ${source_dir}
-      ${GIT_EXECUTABLE}
-      ${git_repository}
-      ${git_tag}
-      ${git_remote_name}
-      ${git_init_submodules}
-      "${git_submodules_recurse}"
-      "${git_submodules}"
-      "${git_shallow}"
-      "${git_progress}"
-      "${git_config}"
-      ${src_name}
-      ${work_dir}
-      ${stamp_dir}/${name}-gitinfo.txt
-      ${stamp_dir}/${name}-gitclone-lastrun.txt
-      "${tls_verify}"
-    )
+    if(NOT git_shallow)
+      _ep_write_gitclone_script(
+        ${tmp_dir}/${name}-gitclone.cmake
+        ${source_dir}
+        ${GIT_EXECUTABLE}
+        ${git_repository}
+        ${git_tag}
+        ${git_remote_name}
+        ${git_init_submodules}
+        "${git_submodules_recurse}"
+        "${git_submodules}"
+        "${git_progress}"
+        "${git_config}"
+        ${src_name}
+        ${work_dir}
+        ${stamp_dir}/${name}-gitinfo.txt
+        ${stamp_dir}/${name}-gitclone-lastrun.txt
+        "${tls_verify}"
+      )
+    else()
+      # if shallow is selected then do not git clone directly but use git fetch
+      # procedure to only fetch the git_tag (it could be tag, branch or sha1)
+      _ep_write_gitclone_with_gitfetch_script(
+        ${tmp_dir}/${name}-gitclone.cmake
+        ${source_dir}
+        ${GIT_EXECUTABLE}
+        ${git_repository}
+        ${git_tag}
+        ${git_remote_name}
+        ${git_init_submodules}
+        "${git_submodules_recurse}"
+        "${git_submodules}"
+        "${git_shallow}"
+        "${git_progress}"
+        "${git_config}"
+        ${src_name}
+        ${work_dir}
+        ${stamp_dir}/${name}-gitinfo.txt
+        ${stamp_dir}/${name}-gitclone-lastrun.txt
+        "${tls_verify}"
+      )
+    endif()
     set(comment "Performing download step (git clone) for '${name}'")
     set(cmd ${CMAKE_COMMAND} -P ${tmp_dir}/${name}-gitclone.cmake)
 
-- 
2.25.1

