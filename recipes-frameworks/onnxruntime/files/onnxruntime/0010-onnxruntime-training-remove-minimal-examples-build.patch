From dc0eb2866a4dc702e3a2bdb451a7454e35bc9e58 Mon Sep 17 00:00:00 2001
From: Othmane AHL ZOUAOUI <othmane.ahlzouaoui@st.com>
Date: Thu, 23 Jan 2025 14:08:23 +0100
Subject: [PATCH 10/12] onnxruntime: training: remove minimal examples build

Omit the build of minimal examples such as mnist, gpt2 and bert
in the onnxruntime-training build since they are irrelevant and
causes compilation error.

Signed-off-by: Othmane AHL ZOUAOUI <othmane.ahlzouaoui@st.com>
---
 cmake/onnxruntime_training.cmake | 104 -------------------------------
 1 file changed, 104 deletions(-)

diff --git a/cmake/onnxruntime_training.cmake b/cmake/onnxruntime_training.cmake
index 01590a43120..032cc971827 100644
--- a/cmake/onnxruntime_training.cmake
+++ b/cmake/onnxruntime_training.cmake
@@ -108,47 +108,6 @@ if (onnxruntime_BUILD_UNIT_TESTS)
   set_target_properties(onnxruntime_training_runner PROPERTIES FOLDER "ONNXRuntimeTest")
   source_group(TREE ${REPO_ROOT} FILES ${onnxruntime_training_runner_srcs} ${onnxruntime_perf_test_src})

-  # MNIST
-  file(GLOB_RECURSE training_mnist_src
-      "${ORTTRAINING_SOURCE_DIR}/models/mnist/*.h"
-      "${ORTTRAINING_SOURCE_DIR}/models/mnist/mnist_data_provider.cc"
-      "${ORTTRAINING_SOURCE_DIR}/models/mnist/main.cc"
-  )
-  onnxruntime_add_executable(onnxruntime_training_mnist ${training_mnist_src})
-  onnxruntime_add_include_to_target(onnxruntime_training_mnist onnxruntime_common onnx onnx_proto ${PROTOBUF_LIB} onnxruntime_training flatbuffers::flatbuffers Boost::mp11 safeint_interface)
-  target_include_directories(onnxruntime_training_mnist PUBLIC ${CMAKE_CURRENT_BINARY_DIR} ${ONNXRUNTIME_ROOT} ${ORTTRAINING_ROOT} ${eigen_INCLUDE_DIRS} ${CXXOPTS} ${extra_includes} ${onnxruntime_graph_header} ${onnxruntime_exec_src_dir} ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR}/onnx onnxruntime_training_runner)
-
-  set(ONNXRUNTIME_LIBS
-      onnxruntime_session
-      ${onnxruntime_libs}
-      ${PROVIDERS_MKLDNN}
-      ${PROVIDERS_DML}
-      onnxruntime_optimizer
-      onnxruntime_providers
-      onnxruntime_util
-      onnxruntime_framework
-  )
-
-  if (onnxruntime_ENABLE_TRAINING_TORCH_INTEROP)
-    list(APPEND ONNXRUNTIME_LIBS Python::Python)
-  endif()
-
-  list(APPEND ONNXRUNTIME_LIBS
-      onnxruntime_graph
-      ${ONNXRUNTIME_MLAS_LIBS}
-      onnxruntime_common
-      onnxruntime_flatbuffers
-      Boost::mp11 safeint_interface
-  )
-
-  if(UNIX AND NOT APPLE)
-    if (HAS_NO_MAYBE_UNINITIALIZED)
-      target_compile_options(onnxruntime_training_mnist PUBLIC "-Wno-maybe-uninitialized")
-    endif()
-  endif()
-  target_link_libraries(onnxruntime_training_mnist PRIVATE onnxruntime_training_runner onnxruntime_training ${ONNXRUNTIME_LIBS} ${onnxruntime_EXTERNAL_LIBRARIES})
-  set_target_properties(onnxruntime_training_mnist PROPERTIES FOLDER "ONNXRuntimeTest")
-
   # squeezenet
   # Disabling build for squeezenet, as no one is using this
   #[[
@@ -167,67 +126,4 @@ if (onnxruntime_BUILD_UNIT_TESTS)
   set_target_properties(onnxruntime_training_squeezenet PROPERTIES FOLDER "ONNXRuntimeTest")
   ]]

-  # BERT
-  file(GLOB_RECURSE training_bert_src
-      "${ORTTRAINING_SOURCE_DIR}/models/bert/*.h"
-      "${ORTTRAINING_SOURCE_DIR}/models/bert/*.cc"
-  )
-  onnxruntime_add_executable(onnxruntime_training_bert ${training_bert_src})
-
-  if(UNIX AND NOT APPLE)
-    if (HAS_NO_MAYBE_UNINITIALIZED)
-      target_compile_options(onnxruntime_training_bert PUBLIC "-Wno-maybe-uninitialized")
-    endif()
-  endif()
-
-  onnxruntime_add_include_to_target(onnxruntime_training_bert onnxruntime_common onnx onnx_proto ${PROTOBUF_LIB} onnxruntime_training flatbuffers::flatbuffers Boost::mp11 safeint_interface)
-  target_include_directories(onnxruntime_training_bert PUBLIC ${CMAKE_CURRENT_BINARY_DIR} ${ONNXRUNTIME_ROOT} ${ORTTRAINING_ROOT} ${MPI_CXX_INCLUDE_DIRS} ${eigen_INCLUDE_DIRS} ${CXXOPTS} ${extra_includes} ${onnxruntime_graph_header} ${onnxruntime_exec_src_dir} ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR}/onnx onnxruntime_training_runner)
-
-  # ROCM provider sources are generated, need to add include directory for generated headers
-  if (onnxruntime_USE_ROCM)
-    target_include_directories(onnxruntime_training_bert PUBLIC ${CMAKE_CURRENT_BINARY_DIR}/amdgpu/onnxruntime)
-  endif()
-
-  target_link_libraries(onnxruntime_training_bert PRIVATE onnxruntime_training_runner onnxruntime_training ${ONNXRUNTIME_LIBS} ${onnxruntime_EXTERNAL_LIBRARIES})
-  set_target_properties(onnxruntime_training_bert PROPERTIES FOLDER "ONNXRuntimeTest")
-
-  # Pipeline
-  file(GLOB_RECURSE training_pipeline_poc_src
-      "${ORTTRAINING_SOURCE_DIR}/models/pipeline_poc/*.h"
-      "${ORTTRAINING_SOURCE_DIR}/models/pipeline_poc/*.cc"
-  )
-  onnxruntime_add_executable(onnxruntime_training_pipeline_poc ${training_pipeline_poc_src})
-
-  if(UNIX AND NOT APPLE)
-    if (HAS_NO_MAYBE_UNINITIALIZED)
-      target_compile_options(onnxruntime_training_pipeline_poc PUBLIC "-Wno-maybe-uninitialized")
-    endif()
-  endif()
-
-  onnxruntime_add_include_to_target(onnxruntime_training_pipeline_poc onnxruntime_common onnx onnx_proto ${PROTOBUF_LIB} onnxruntime_training flatbuffers::flatbuffers Boost::mp11 safeint_interface)
-  target_include_directories(onnxruntime_training_pipeline_poc PUBLIC ${CMAKE_CURRENT_BINARY_DIR} ${ONNXRUNTIME_ROOT} ${ORTTRAINING_ROOT} ${MPI_CXX_INCLUDE_DIRS} ${eigen_INCLUDE_DIRS} ${CXXOPTS} ${extra_includes} ${onnxruntime_graph_header} ${onnxruntime_exec_src_dir} ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR}/onnx onnxruntime_training_runner)
-  if (onnxruntime_USE_NCCL)
-    target_include_directories(onnxruntime_training_pipeline_poc PRIVATE ${NCCL_INCLUDE_DIRS})
-  endif()
-
-  target_link_libraries(onnxruntime_training_pipeline_poc PRIVATE onnxruntime_training_runner onnxruntime_training ${ONNXRUNTIME_LIBS} ${onnxruntime_EXTERNAL_LIBRARIES})
-  set_target_properties(onnxruntime_training_pipeline_poc PROPERTIES FOLDER "ONNXRuntimeTest")
-
-  # GPT-2
-  file(GLOB_RECURSE training_gpt2_src
-      "${ORTTRAINING_SOURCE_DIR}/models/gpt2/*.h"
-      "${ORTTRAINING_SOURCE_DIR}/models/gpt2/*.cc"
-  )
-  onnxruntime_add_executable(onnxruntime_training_gpt2 ${training_gpt2_src})
-  if(UNIX AND NOT APPLE)
-    if (HAS_NO_MAYBE_UNINITIALIZED)
-      target_compile_options(onnxruntime_training_gpt2 PUBLIC "-Wno-maybe-uninitialized")
-    endif()
-  endif()
-
-  target_include_directories(onnxruntime_training_gpt2 PUBLIC ${CMAKE_CURRENT_BINARY_DIR} ${ONNXRUNTIME_ROOT} ${ORTTRAINING_ROOT} ${MPI_CXX_INCLUDE_DIRS} ${eigen_INCLUDE_DIRS} ${CXXOPTS} ${extra_includes} ${onnxruntime_graph_header} ${onnxruntime_exec_src_dir} ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR}/onnx onnxruntime_training_runner)
-
-  target_link_libraries(onnxruntime_training_gpt2 PRIVATE onnxruntime_training_runner onnxruntime_training ${ONNXRUNTIME_LIBS} ${onnxruntime_EXTERNAL_LIBRARIES})
-  set_target_properties(onnxruntime_training_gpt2 PROPERTIES FOLDER "ONNXRuntimeTest")
-
 endif()
--
2.34.1
